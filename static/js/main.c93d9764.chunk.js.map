{"version":3,"sources":["Components/contactList/ContactListStyle.js","Components/contactList/ContactList.js","Components/filter/FilterStyle.js","Components/filter/Filter.js","Components/contacts/ContactsStyle.js","Components/contacts/Contacts.js","Components/check/Check.js","Components/AppStules.js","Components/App.js","index.js"],"names":["ContactListStyle","styled","section","ContactList","contactsToRender","onDelete","map","props","name","number","id","className","type","onClick","FilterStyles","Filter","onChange","filterStr","value","autoComplete","ContactsStyle","Contacts","state","target","setState","onSubmit","e","preventDefault","contact","uuidv4","getNewContact","reset","this","pattern","title","required","Component","checkContact","dataToCheck","forEach","el","toLowerCase","alert","Error","AppStyle","App","contacts","filter","newContact","Check","prevState","getFilteredContacts","includes","Delete","idToDelete","closest","dataset","contactsAfterDel","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c93d9764.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ContactListStyle = styled.section`\r\n  .contactItem {\r\n    list-style: none;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ContactListStyle } from \"./ContactListStyle\";\r\n\r\nconst ContactList = ({ contactsToRender, onDelete }) => {\r\n  return (\r\n    <ContactListStyle>\r\n      <ul>\r\n        {contactsToRender.map((props) => {\r\n          const { name, number, id } = props;\r\n          return (\r\n            <li className=\"contactItem\" key={id} data-id={id}>\r\n              {`${name}: ${number}`}\r\n              <button type=\"button\" onClick={onDelete}>\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </ContactListStyle>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  onDelete: PropTypes.func.isRequired,\r\n  contactsToRender: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n      id: PropTypes.string,\r\n    })\r\n  ),\r\n};\r\nexport default ContactList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const FilterStyles = styled.section`\r\n  display: grid;\r\n\r\n  .filterInput {\r\n    border-radius: 15px;\r\n    margin: 0 auto;\r\n    width: 180px;\r\n    text-align: center;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FilterStyles } from \"./FilterStyle\";\r\n\r\nconst Filter = ({ onChange, filterStr }) => {\r\n  return (\r\n    <>\r\n      <FilterStyles>\r\n        <label>Find contacts by name</label>\r\n        <input\r\n          className=\"filterInput\"\r\n          type=\"filter\"\r\n          name=\"filter\"\r\n          onChange={onChange}\r\n          value={filterStr}\r\n          autoComplete=\"off\"\r\n        />\r\n      </FilterStyles>\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  filterStr: PropTypes.string,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactsStyle = styled.section`\r\n  text-align: center;\r\n  .contactsForm {\r\n    display: grid;\r\n  }\r\n  .contactsFormBtn {\r\n    margin: auto;\r\n    width: 100px;\r\n  }\r\n  .contactsFormLabel {\r\n    margin: 10px;\r\n  }\r\n  .contactsFormInput {\r\n    border-radius: 15px;\r\n    margin: auto;\r\n    width: 200px;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ContactsStyle } from \"./ContactsStyle\";\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n    id: \"\",\r\n  };\r\n\r\n  onChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const contact = { name: name, number: number, id: uuidv4() };\r\n\r\n    this.props.getNewContact(contact);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <ContactsStyle>\r\n        <form className=\"contactsForm\" onSubmit={this.onSubmit}>\r\n          <label>Name </label>\r\n          <input\r\n            className=\"contactsFormInput\"\r\n            onChange={this.onChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <label className=\"contactsFormLabel\">Number </label>\r\n          <input\r\n            className=\"contactsFormInput\"\r\n            onChange={this.onChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n\r\n          <button className=\"contactsFormBtn\" type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </ContactsStyle>\r\n    );\r\n  }\r\n}\r\n\r\nContacts.propTypes = {\r\n  getNewContact: PropTypes.func.isRequired,\r\n};\r\nexport default Contacts;\r\n","export default function checkContact(dataToCheck, state) {\r\n  dataToCheck.forEach((el) => {\r\n    if (el.name.toLowerCase() === state.name.toLowerCase()) {\r\n      alert(`${el.name} is already in contacts.`);\r\n      throw Error;\r\n    }\r\n\r\n    if (el.number.toLowerCase() === state.number.toLowerCase()) {\r\n      alert(`${el.number} is already in contacts.`);\r\n      throw Error;\r\n    }\r\n  });\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppStyle = styled.section`\r\n  color: #0044ffc9;\r\n  text-align: center;\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport ContactList from \"./contactList/ContactList\";\r\nimport Filter from \"./filter/Filter\";\r\nimport Contacts from \"./contacts/Contacts\";\r\nimport Check from \"./check/Check\";\r\nimport { AppStyle } from \"./AppStules\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: \"\",\r\n  };\r\n\r\n  newContact = (contact) => {\r\n    try {\r\n      Check(this.state.contacts, contact);\r\n    } catch {\r\n      return;\r\n    }\r\n\r\n    this.setState((prevState) => {\r\n      return { contacts: [...prevState.contacts, contact] };\r\n    });\r\n  };\r\n\r\n  onChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  getFilteredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  Delete = (e) => {\r\n    const idToDelete = e.target.closest(\"li\").dataset.id;\r\n    const contactsAfterDel = this.state.contacts.filter(\r\n      (contact) => idToDelete !== contact.id\r\n    );\r\n\r\n    this.setState({\r\n      contacts: [...contactsAfterDel],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <AppStyle>\r\n          <h2>Phonebook</h2>\r\n          <Contacts getNewContact={this.newContact} />\r\n\r\n          <h2>Contacts</h2>\r\n          <Filter onChange={this.onChange} filterStr={this.state.filter} />\r\n          {this.getFilteredContacts().length > 0 && (\r\n            <ContactList\r\n              contactsToRender={this.getFilteredContacts()}\r\n              onDelete={this.Delete}\r\n            />\r\n          )}\r\n        </AppStyle>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}